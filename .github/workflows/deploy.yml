name: Deploy Backend to EC2

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Deploy .NET Backend App to EC2
    runs-on: ubuntu-latest
    environment: main

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Create Zip Package (include source only)
        run: |
          mkdir upload
          cp -r Backend/EcommerenceBackend upload/EcommerenceBackend
          cd upload
          zip -r ../EcommerenceBackend.zip .
          cd ..
          ls -lh EcommerenceBackend.zip

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts || true

      - name: Upload Zip to EC2
        run: |
          scp -o StrictHostKeyChecking=no EcommerenceBackend.zip ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/EcommerenceBackend.zip

      - name: Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<-'EOF'
            echo "✅ Connected to EC2"

            # Cleanup old container and image
            sudo docker stop ecommercebackend-webapi || true
            sudo docker rm ecommercebackend-webapi || true
            sudo docker rmi ecommerencebackend-ecommercebackend-webapi || true

            # Clean old folder and unzip
            rm -rf ~/EcommerenceBackend
            unzip -o ~/EcommerenceBackend.zip -d ~/EcommerenceBackend

            # Create Dockerfile
            cat <<'DOCKERFILE' > ~/EcommerenceBackend/Dockerfile
            FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
            WORKDIR /src
            COPY EcommerenceBackend/EcommerenceBackend.WebApi/*.csproj ./EcommerenceBackend/EcommerenceBackend.WebApi/
            COPY EcommerenceBackend/EcommerenceBackend.Application.Domain/*.csproj ./EcommerenceBackend/EcommerenceBackend.Application.Domain/
            COPY EcommerenceBackend/EcommerenceBackend.Application.Dto/*.csproj ./EcommerenceBackend/EcommerenceBackend.Application.Dto/
            COPY EcommerenceBackend/EcommerenceBackend.Infrastructure/*.csproj ./EcommerenceBackend/EcommerenceBackend.Infrastructure/
            COPY EcommerenceBackend/EcommerenceBackend.Application.UseCases/*.csproj ./EcommerenceBackend/EcommerenceBackend.Application.UseCases/
            COPY EcommerenceBackend/EcommerenceBackend.Application.Interfaces/*.csproj ./EcommerenceBackend/EcommerenceBackend.Application.Interfaces/
            COPY EcommerenceBackend/EcommerenceBackend.Application.Interface/*.csproj ./EcommerenceBackend/EcommerenceBackend.Application.Interface/
            COPY EcommerenceBackend/EcommerenceBackendUnitTestProj/*.csproj ./EcommerenceBackend/EcommerenceBackendUnitTestProj/
            RUN dotnet restore "./EcommerenceBackend/EcommerenceBackend.WebApi/EcommerenceBackend.WebApi.csproj"
            COPY . .
            RUN dotnet build "./EcommerenceBackend/EcommerenceBackend.WebApi/EcommerenceBackend.WebApi.csproj" -c Release -o /app/build

            FROM build AS publish
            RUN dotnet publish "./EcommerenceBackend/EcommerenceBackend.WebApi/EcommerenceBackend.WebApi.csproj" -c Release -o /app/publish

            FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS final
            WORKDIR /app
            COPY --from=publish /app/publish .
            ENTRYPOINT ["dotnet", "EcommerenceBackend.WebApi.dll"]
            DOCKERFILE

            # Create .dockerignore
            cat <<'DOCKERIGNORE' > ~/EcommerenceBackend/.dockerignore
              **/.classpath
              **/.dockerignore
              **/.env
              **/.git
              **/.gitignore
              **/.project
              **/.settings
              **/.toolstarget
              **/.vs
              **/.vscode
              **/*.*proj.user
              **/bin
              **/obj
              DOCKERIGNORE

            # Build and run Docker container
            cd ~/EcommerenceBackend
            sudo docker build -t ecommerencebackend-ecommercebackend-webapi .
            sudo docker run -d -p 5000:8080 --name ecommercebackend-webapi ecommerencebackend-ecommercebackend-webapi

            echo "✅ Backend deployed and running on port 5000"
          EOF
